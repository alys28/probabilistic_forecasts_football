group_by(grid) %>%
mutate(
p_bar_12 = mean(phat_A - phat_B),
diff_non_cent = phat_A - phat_B,
diff_cent = phat_A - phat_B - p_bar_12
) %>% ungroup()
library(evalRTPF)
df_gen(N = nsamp, Ngame = ngame) %>%
group_by(grid) %>%
mutate(
p_bar_12 = mean(phat_A - phat_B),
diff_non_cent = phat_A - phat_B,
diff_cent = phat_A - phat_B - p_bar_12
) %>% ungroup()
df_gen(N = 10, Ngame = 20) %>%
group_by(grid) %>%
mutate(
p_bar_12 = mean(phat_A - phat_B),
diff_non_cent = phat_A - phat_B,
diff_cent = phat_A - phat_B - p_bar_12
) %>% ungroup()
df_gen(N = 10, Ngame = 20) %>%
group_by(grid) %>%
mutate(
p_bar_12 = mean(phat_A - phat_B),
diff_non_cent = phat_A - phat_B,
diff_cent = phat_A - phat_B - p_bar_12
) %>% ungroup()
df_gen(N = 10, Ngame = 20)
library(sde)
install.packages("sde")
library(sde)
df_gen(N = 10, Ngame = 20)
df_gen(N = 10, Ngame = 20) %>%
group_by(grid) %>%
mutate(
p_bar_12 = mean(phat_A - phat_B),
diff_non_cent = phat_A - phat_B,
diff_cent = phat_A - phat_B - p_bar_12
) %>% ungroup()
df_equ <-  df_gen(N = nsamp, Ngame = ngame) %>%
group_by(grid) %>%
mutate(
p_bar_12 = mean(phat_A - phat_B),
diff_non_cent = phat_A - phat_B,
diff_cent = phat_A - phat_B - p_bar_12
) %>% ungroup()
df_gen(N = 10, Ngame = 20) %>%
group_by(grid) %>%
mutate(
p_bar_12 = mean(phat_A - phat_B),
diff_non_cent = phat_A - phat_B,
diff_cent = phat_A - phat_B - p_bar_12
) %>% ungroup()
df_equ %>% group_by(grid) %>%
summarise(delta_n = mean(L(phat_A, Y) - L(phat_B, Y))) %>%
{sum((.)$delta_n ^ 2) / nsamp * ngame}
df_equ <- df_gen(N = 10, Ngame = 20) %>%
group_by(grid) %>%
mutate(
p_bar_12 = mean(phat_A - phat_B),
diff_non_cent = phat_A - phat_B,
diff_cent = phat_A - phat_B - p_bar_12
) %>% ungroup()
df_equ %>% group_by(grid) %>%
summarise(delta_n = mean(L(phat_A, Y) - L(phat_B, Y))) %>%
{sum((.)$delta_n ^ 2) / nsamp * ngame}
L <- function(x, y) {
return((x - y) ^ 2)
}
df_equ %>% group_by(grid) %>%
summarise(delta_n = mean(L(phat_A, Y) - L(phat_B, Y))) %>%
{sum((.)$delta_n ^ 2) / nsamp * ngame}
df_equ %>% group_by(grid) %>%
summarise(delta_n = mean(L(phat_A, Y) - L(phat_B, Y))) %>%
{sum((.)$delta_n ^ 2) / 10 * 20}
grid
df_equ
print(df_equ)
print(n=100)
print(n=100, df_equ)
df_gen(N = 50, Ngame = 100) %>%
group_by(grid) %>%
mutate(
p_bar_12 = mean(phat_A - phat_B),
diff_non_cent = phat_A - phat_B,
diff_cent = phat_A - phat_B - p_bar_12
) %>% ungroup()
df_gen(N = 1, Ngame = 100) %>%
group_by(grid) %>%
mutate(
p_bar_12 = mean(phat_A - phat_B),
diff_non_cent = phat_A - phat_B,
diff_cent = phat_A - phat_B - p_bar_12
) %>% ungroup()
df_gen(N = 50, Ngame = 1) %>%
group_by(grid) %>%
mutate(
p_bar_12 = mean(phat_A - phat_B),
diff_non_cent = phat_A - phat_B,
diff_cent = phat_A - phat_B - p_bar_12
) %>% ungroup()
df_equ <- df_gen(N = 1, Ngame = 10) %>%
group_by(grid) %>%
mutate(
p_bar_12 = mean(phat_A - phat_B),
diff_non_cent = phat_A - phat_B,
diff_cent = phat_A - phat_B - p_bar_12
) %>% ungroup()
df_equ <- df_gen(N = 100, Ngame = 10) %>%
group_by(grid) %>%
mutate(
p_bar_12 = mean(phat_A - phat_B),
diff_non_cent = phat_A - phat_B,
diff_cent = phat_A - phat_B - p_bar_12
) %>% ungroup()
df_equ
df_equ <- df_gen(N = 100, Ngame = 1) %>%
group_by(grid) %>%
mutate(
p_bar_12 = mean(phat_A - phat_B),
diff_non_cent = phat_A - phat_B,
diff_cent = phat_A - phat_B - p_bar_12
) %>% ungroup()
df_equ <- df_gen(N = 100, Ngame = 2) %>%
group_by(grid) %>%
mutate(
p_bar_12 = mean(phat_A - phat_B),
diff_non_cent = phat_A - phat_B,
diff_cent = phat_A - phat_B - p_bar_12
) %>% ungroup()
df_equ <- df_gen(N = 100, Ngame = 2) %>%
group_by(grid) %>%
mutate(
p_bar_12 = mean(phat_A - phat_B),
diff_non_cent = phat_A - phat_B,
diff_cent = phat_A - phat_B - p_bar_12
) %>% ungroup()
df_equ
prob <- c(0.1, 0.4, 0.6, 0.8, 0.9)
grid <- c(0, 0.25, 0.5, 0.75, 1)
outcome <- 1  # Example outcome
# Perform linear interpolation
interpolated_data <- lin_interp(prob, grid, outcome)
print(interpolated_data)
prob <- c(0.1, 0.4, 0.6, 0.8, 0.9)
grid <- c(0, 0.25, 0.5, 0.75, 1)
outcome <- 2  # Example outcome
# Perform linear interpolation
interpolated_data <- lin_interp(prob, grid, outcome)
print(interpolated_data)
prob <- c(0.1, 0.4, 0.5, 0.6, 0.8, 0.9)
grid <- c(0, 0.25, 0.5, 0.75, 1)
outcome <- 2  # Example outcome
# Perform linear interpolation
interpolated_data <- lin_interp(prob, grid, outcome)
prob <- c(0.1, 0.4, 0.6, 0.8, 0.9)
grid <- c(0, 0.25, 0.5, 0.75, 1)
outcome <- 2  # Example outcome
# Perform linear interpolation
interpolated_data <- lin_interp(prob, grid, outcome)
print(interpolated_data)
prob <- c(0.1, 0.4, 0.6, 0.8, 0.9)
grid <- c(0, 0.2, 0.4, 0.6, 0.8, 1)
outcome <- 2  # Example outcome
# Perform linear interpolation
interpolated_data <- lin_interp(prob, grid, outcome)
prob <- c(0.1, 0.4, 0.6, 0.8, 0.9)
grid <- c(0, 0.25, 0.5, 0.75, 1)
outcome <- 2  # Example outcome
# Perform linear interpolation
interpolated_data <- lin_interp(prob, grid, outcome)
print(interpolated_data)
library(ggplot2)
library(tibble)
library(MASS)
library(rlist)
library(RSpectra)
#>
nsamp <- 201 # number of in-game events
ngame <- 257 # number of games
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
csv_files
csv_files1
csv_files1 <- list.files(csv_dir1, pattern = "*.csv", full.names = TRUE)
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
library(ggplot2)
library(tibble)
library(MASS)
library(rlist)
library(RSpectra)
#>
#> Attaching package: 'MASS'
#> The following object is masked from 'package:dplyr':
#>
#>     select
nsamp <- 201 # number of in-game events
ngame <- 545 # number of games
#' Parameter for generating the eigenvalues, and p-values
D <- 10 # Number of eigenvalues to keep
N_MC <- 5000 # for simulating the p-value
L <- function(x, y) {
return((x - y) ^ 2)
}
# Data formatting ---------------------------------------------------------=
# Define the path to the dataset
dataset_path <- "/Users/aly/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/LR_interpolated_combined_data.csv"
# Load the dataset
dataset <- read.csv(dataset_path)
library(ggplot2)
library(tibble)
library(MASS)
library(rlist)
library(RSpectra)
#>
#> Attaching package: 'MASS'
#> The following object is masked from 'package:dplyr':
#>
#>     select
nsamp <- 201 # number of in-game events
ngame <- 545 # number of games
#' Parameter for generating the eigenvalues, and p-values
D <- 10 # Number of eigenvalues to keep
N_MC <- 5000 # for simulating the p-value
L <- function(x, y) {
return((x - y) ^ 2)
}
# Data formatting ---------------------------------------------------------=
# Define the path to the dataset
dataset_path <- "/Users/aly/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/LR_interpolated_combined_data.csv"
# Load the dataset
dataset <- read.csv(dataset_path)
# Ensure your dataset has the necessary columns
# For example, if your columns are named differently, rename them
df_equ <- dataset %>%
group_by(game_id) %>%
filter(!any(is.na(across(everything())))) %>%
ungroup() %>%
rename(
phat_A = "phat_A",
phat_B = "phat_B",
Y = "Y",
grid = "game_completed"
) %>%
group_by(grid) %>%
mutate(
p_bar_12 = mean(phat_A - phat_B),
diff_non_cent = phat_A - phat_B,
diff_cent = phat_A - phat_B - p_bar_12
) %>%
ungroup()
ngame <- length(unique(df_equ$game_id))
# Apply our test ----------------------------------------------------------
Z <- df_equ %>% group_by(grid) %>%
summarise(delta_n = mean(L(phat_A, Y) - L(phat_B, Y))) %>%
{sum((.)$delta_n ^ 2) / nsamp * ngame}
temp <- df_equ %>% group_split(grid, .keep = FALSE)
eigV_hat <- lapply(1:nsamp, function(i) {
sapply(1:nsamp, function(j) {
as.numeric(temp[[i]]$diff_non_cent %*% temp[[j]]$diff_non_cent / ngame)
})
}) %>% list.rbind %>% {
eigs_sym(
A = (.),
k = D,
which = "LM",
opts = list(retvec = FALSE)
)$values
} %>%
{
(.) / nsamp
}
eigV_til <- lapply(1:nsamp, function(i) {
sapply(1:nsamp, function(j) {
as.numeric(temp[[i]]$diff_cent %*% temp[[j]]$diff_cent / ngame)
})
}) %>% list.rbind %>% {
eigs_sym(
A = (.),
k = D,
which = "LM",
opts = list(retvec = FALSE)
)$values
} %>%
{
(.) / nsamp
}
MC_hat <- sapply(1:N_MC, function(x) {
crossprod(eigV_hat, rchisq(D, df = 1))
})
q_90_hat <- quantile(MC_hat, 0.90)
q_95_hat <- quantile(MC_hat, 0.95)
q_99_hat <- quantile(MC_hat, 0.99)
MC_til <- sapply(1:N_MC, function(x) {
crossprod(eigV_til, rchisq(D, df = 1))
})
q_90_til <- quantile(MC_til, 0.90)
q_95_til <- quantile(MC_til, 0.95)
q_99_til <- quantile(MC_til, 0.99)
p_hat <- 1 - ecdf(MC_hat)(Z)
tibble(
type  = c("non-center", "center"),
Z = rep(Z, 2),
"pval" = c(p_hat, p_hat),
"90%" = c(q_90_hat, q_90_til),
"95%" = c(q_95_hat, q_95_til),
"99%" = c(q_99_hat, q_99_til))
#> # A tibble: 2 Ã— 6
#>   type            Z  pval `90%` `95%` `99%`
#>   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl>
#> 1 non-center 0.0262 0.869 0.388 0.540 0.877
#> 2 center     0.0262 0.869 0.386 0.542 0.995
to_center <- FALSE
ZZ <- calc_Z(df = df_equ, pA = "phat_A", pB = "phat_B", Y = "Y", nsamp = nsamp, ngame = ngame)
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/calc_Z.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/calc_pval.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/calc_L_s2.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/calc_eig.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/calc_L_s2.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/plot_pcb.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
plot_pcb("/Users/aly/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/result_L_s2.csv")
output_csv
plot_pcb(temp)
View(df_equ)
View(df_equ)
write.csv(my_dataframe, "results_L_s2_LR.csv", row.names = FALSE)
View(oh)
write.csv(df_equ, "results_L_s2_LR.csv", row.names = FALSE)
write.csv(oh, "results_pval_LR.csv", row.names = FALSE)
View(temp)
write.csv(temp, "results_L_s2_LR.csv", row.names = FALSE)
write.csv(temp, "results_L_s2_LR.csv", row.names = FALSE)
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
plot_pcb(temp)
View(oh)
View(game_data_list)
View(oh)
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
plot_pcb(temp)
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
plot_pcb(temp)
View(oh)
write.csv(df_equ, "results_L_s2_RF.csv", row.names = FALSE)
write.csv(temp, "results_L_s2_RF.csv", row.names = FALSE)
View(oh)
write.csv(oh, "results_pval_RF.csv", row.names = FALSE)
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
source("~/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
plot_pcb(temp)
write.csv(temp, "results_L_s2_LR_RF.csv", row.names = FALSE)
write.csv(oh, "results_pval_LR_RF.csv", row.names = FALSE)
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
# Directory containing the CSV files
csv_dir <- "/Users/aly/Documents/University of Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/test_2/RF_Timeout_testing"
# List of CSV files
csv_files <- list.files(csv_dir, pattern = "*.csv", full.names = TRUE)
csv_files
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
temp <- calc_L_s2(df = df_equ, pA = "phat_A", pB = "phat_B")
print(temp)
plot_pcb(df = temp)
write.csv(temp, file = "R/NFL/test_2/RF_Timeout_L2.csv", row.names = FALSE)
oh
tibble(
type = ifelse(to_center, "center", "non-center"),
Z = ZZ,
pval = oh$p_val,
"90%" = oh$quantile[1],
"95%" = oh$quantile[2],
"99%" = oh$quantile[3]
)
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
temp <- calc_L_s2(df = df_equ, pA = "phat_A", pB = "phat_B")
print(temp)
plot_pcb(df = temp)
tibble(
type = ifelse(to_center, "center", "non-center"),
Z = ZZ,
pval = oh$p_val,
"90%" = oh$quantile[1],
"95%" = oh$quantile[2],
"99%" = oh$quantile[3]
)
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
# Save the combined data to a CSV file
output_csv <- "/Users/aly/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/test_3/LR_Normalized_interpolated_combined_data.csv"
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
temp <- calc_L_s2(df = df_equ, pA = "phat_A", pB = "phat_B")
print(temp)
plot_pcb(df = temp)
write.csv(temp, file = "R/NFL/test_3/LR_Normalized_L2.csv", row.names = FALSE) # TO CHANGE
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
temp <- calc_L_s2(df = df_equ, pA = "phat_A", pB = "phat_B")
print(temp)
plot_pcb(df = temp)
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
plot_pcb(df = temp)
tibble(
type = ifelse(to_center, "center", "non-center"),
Z = ZZ,
pval = oh$p_val,
"90%" = oh$quantile[1],
"95%" = oh$quantile[2],
"99%" = oh$quantile[3]
)
x <- tibble(
type = ifelse(to_center, "center", "non-center"),
Z = ZZ,
pval = oh$p_val,
"90%" = oh$quantile[1],
"95%" = oh$quantile[2],
"99%" = oh$quantile[3]
)
x
write.csv(x, file="R/NFL/test_3/LR_Normalized_pval.csv")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
plot_pcb(df = temp)
write.csv(temp, file = "R/NFL/test_3/LR_2_Normalized_L2.csv", row.names = FALSE) # TO CHANGE
write.csv(x, file="R/NFL/test_3/LR_2_Normalized_pval.csv")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
tibble(
type = ifelse(to_center, "center", "non-center"),
Z = ZZ,
pval = oh$p_val,
"90%" = oh$quantile[1],
"95%" = oh$quantile[2],
"99%" = oh$quantile[3]
)
plot_pcb(df = temp)
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
tibble(
type = ifelse(to_center, "center", "non-center"),
Z = ZZ,
pval = oh$p_val,
"90%" = oh$quantile[1],
"95%" = oh$quantile[2],
"99%" = oh$quantile[3]
)
plot_pcb(df = temp)
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
plot_pcb(df = temp)
tibble(
type = ifelse(to_center, "center", "non-center"),
Z = ZZ,
pval = oh$p_val,
"90%" = oh$quantile[1],
"95%" = oh$quantile[2],
"99%" = oh$quantile[3]
)
write.csv(x, file="R/NFL/test_3/LR_2_Normalized_pval.csv")
read.csv("R/NFL/test_3/LR_2_Normalized_pval.csv")
read.csv("R/NFL/test_3/LR_Normalized_pval.csv")
read.csv("R/NFL/test_3/LR_Normalized_pval.csv")
x
x = tibble(
type = ifelse(to_center, "center", "non-center"),
Z = ZZ,
pval = oh$p_val,
"90%" = oh$quantile[1],
"95%" = oh$quantile[2],
"99%" = oh$quantile[3]
)
write.csv(x, file="R/NFL/test_3/LR_2_Normalized_pval.csv")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
plot_pcb(df = temp)
c
x
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
x
plot_pcb(df = temp)
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
x
plot_pcb(df = temp)
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
plot_pcb(df = temp)
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/linear_interpolation.R")
source("~/Documents/University_of_Waterloo/Winter 2025/Research/code/evalRTPF/R/NFL/NFL_testing.R")
plot_pcb(df = temp)
